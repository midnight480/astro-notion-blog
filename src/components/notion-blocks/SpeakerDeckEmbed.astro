---
export interface Props {
  url: URL
}

const { url } = Astro.props

// SpeakerDeckのoEmbed APIを使用して埋め込みHTMLを取得
let embedHtml = ''
let error = ''

try {
  const oembedUrl = `https://speakerdeck.com/oembed.json?url=${encodeURIComponent(url.toString())}`
  const response = await fetch(oembedUrl)
  
  if (response.ok) {
    const data = await response.json()
    embedHtml = data.html
  } else {
    error = 'SpeakerDeck埋め込みの取得に失敗しました'
  }
} catch (err) {
  error = 'SpeakerDeck埋め込みの取得中にエラーが発生しました'
  console.error('SpeakerDeck oEmbed error:', err)
}
---

<div class="speakerdeck-wrapper">
  {embedHtml ? (
    <div set:html={embedHtml} />
  ) : (
    <div class="error-message">
      <p>{error}</p>
      <a href={url.toString()} target="_blank" rel="noopener noreferrer">
        SpeakerDeckで表示
      </a>
    </div>
  )}
</div>

<style>
  .speakerdeck-wrapper {
    width: 100%;
    margin: 1.5rem 0;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }
  
  .speakerdeck-wrapper :global(iframe) {
    width: 100%;
    border: none;
    border-radius: 8px;
  }
  
  .error-message {
    padding: 1rem;
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    text-align: center;
    color: #6c757d;
  }
  
  .error-message p {
    margin: 0 0 0.5rem 0;
    font-size: 0.9rem;
  }
  
  .error-message a {
    color: #007bff;
    text-decoration: none;
    font-weight: 500;
  }
  
  .error-message a:hover {
    text-decoration: underline;
  }
  
  @media (max-width: 640px) {
    .speakerdeck-wrapper {
      margin: 1rem 0;
      border-radius: 4px;
    }
  }
</style>
